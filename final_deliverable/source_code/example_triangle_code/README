Testing
-------
Run 'ant test' to run all test cases.

Coverage
--------
Run './coverage.sh' to compute the coverage results.
After completion, you can view the detailed html coverage report:
coverage_results/index.html

Mutation
--------
Run './mutation.sh' to compute the mutation score.
After completion, the following files in the 'mutation_results' directory provide
additional information about the generated, killed, and live mutants:
killed.csv:  a summary of whether a mutant is still live or was killed with an
             exception/assertion/timeout.
summary.csv: a one-line summary that indicates how many mutants were generated
             and killed, and how long the analysis took.
mutants.log: a summary of the generated mutants (i.e., what part of the code was
             changed and how).

Rather than reading the mutants.log file, you can show the source code differences between
a mutant and the original version by running:
'./show_mutant.sh <mutant ID>'

For example, the following command shows how mutant 1 differs from the original (i.e.,
unmutated) version:
'./show_mutant.sh 1'

The output is a unified diff that indicates what line the mutation step changed:
--- src/triangle/Triangle.java
+++ .mutated/mutants/1/triangle/Triangle.java
@@ -20 +20 @@
-        if (a <= 0 || b <= 0 || c <= 0) {
+        if (a <= 1 || b <= 0 || c <= 0) {

The line starting with '@@' indicates the line number of the changed source code line
(20 in this example). The line starting with '- ' shows the removed line, and the line
starting with '+ ' shows the line that replaced it.

Mutants:

11: For this mutant to be killed a and b must be less than or equal to zero and c must be positive. Since c can't equal a or b,  we either have a scelene triangle or an isosceles triangle. For the scalene case a must equal b, however on line 43 a + b > c will return false, as a + b is either negative or zero and c is positive. When a does not equal b than line 34 will evaulate to true and return Invalid, as c again is larger than a + b.

59: Trian can't be negative

87 and 76: For this mutant to be killed we would need two of the statements in this conditional to be true (removing the mutants would be identical). This can not happen when values can not equal each other as trian == 0. Thus the only way for a + c <= b and c + b <= a is if a == b and c is zero, which can not happen as trian would not be 0 and out input has to be greater than 0.

101: Trian can't be negative, as if trian is 0 it would be caught when checking for an invalid scalene triagle.

128 and 111: These mutant to be killed require both statements to be false (and thus reports iscoceles when invalid). For 128  Trian must be 3 which is when c == b. If c and b are equal then a + c > b is never false as a has to be greater than 0. For 111 Trian can be 3 or 2 which has c == a or c == b, a + b > c is never false in either case as a or b always are greater than 0.

136: Unreachable statement, if trian is greater than 3, it would be evaluated at line 40 when checking for an Equailateral triangle. Thus in this context train == 3 and train >= 3 are equivilent.

145: This mutant requires both trian != 3, if trian 0-2 the if blocks before would have executed and if trian is 4-inf we would would of returned on line 40 as the triangle is equilateral, thus the value of trian has to be 3 at this code and this mutant can't be killed (as the trian == 3 is technically redundant).
